"use client"

import type { GameState, Player } from "@/lib/types"

interface GameBoardProps {
  gameState: GameState
  currentPlayer: Player
  isOpponent: boolean
  targetRowSelection: boolean
  handleRowSelect: (row: string) => void
}

export default function GameBoard({
  gameState,
  currentPlayer,
  isOpponent,
  targetRowSelection,
  handleRowSelect,
}: GameBoardProps) {
  const opponent = isOpponent ? currentPlayer : null

  return (
    <div className="mb-6">
      {isOpponent ? (
        <h2 className="text-xl font-semibold">
          Opponent ({currentPlayer.name})<span className="ml-4 text-yellow-400">Score: {currentPlayer.score}</span>
          <span className="ml-4 text-purple-400">Rounds won: {currentPlayer.roundsWon}</span>
          {currentPlayer.pass && <span className="ml-4 text-red-400">Passed</span>}
        </h2>
      ) : (
        <h2 className="text-xl font-semibold">Your Board</h2>
      )}

      <div className="mt-2 space-y-2">
        {/* Long Range Row */}
        <div className="flex items-center">
          <div className="w-28 text-right pr-2 font-semibold">Long Range (+5):</div>
          <div
            className={`flex-1 h-16 flex items-center p-1 rounded ${gameState.weatherEffects.diamonds ? "bg-red-900" : "bg-gray-700"} 
              ${targetRowSelection ? "border-2 border-yellow-400 cursor-pointer" : ""}`}
            onClick={() => targetRowSelection && handleRowSelect("diamonds")}
          >
            {gameState.weatherEffects.diamonds && (
              <div className="absolute -mt-8 text-xs bg-red-800 px-2 py-1 rounded">Weather: Fog</div>
            )}
            {currentPlayer.field.diamonds.length > 0 ? (
              currentPlayer.field.diamonds.map((card, index) => (
                <div
                  key={`${isOpponent ? "op" : "pl"}-dia-${index}`}
                  className="bg-gray-600 text-sm p-1 m-1 rounded w-16 h-14 flex items-center justify-center"
                >
                  {card.value}
                </div>
              ))
            ) : (
              <div className="text-gray-500">No cards</div>
            )}
          </div>
        </div>

        {/* Mid Range Row */}
        <div className="flex items-center">
          <div className="w-28 text-right pr-2 font-semibold">Mid Range (+3):</div>
          <div
            className={`flex-1 h-16 flex items-center p-1 rounded ${gameState.weatherEffects.spades ? "bg-red-900" : "bg-gray-700"} 
              ${targetRowSelection ? "border-2 border-yellow-400 cursor-pointer" : ""}`}
            onClick={() => targetRowSelection && handleRowSelect("spades")}
          >
            {gameState.weatherEffects.spades && (
              <div className="absolute -mt-8 text-xs bg-red-800 px-2 py-1 rounded">Weather: Rain</div>
            )}
            {currentPlayer.field.spades.length > 0 ? (
              currentPlayer.field.spades.map((card, index) => (
                <div
                  key={`${isOpponent ? "op" : "pl"}-spa-${index}`}
                  className="bg-gray-600 text-sm p-1 m-1 rounded w-16 h-14 flex items-center justify-center"
                >
                  {card.value}
                </div>
              ))
            ) : (
              <div className="text-gray-500">No cards</div>
            )}
          </div>
        </div>

        {/* Close Range Row */}
        <div className="flex items-center">
          <div className="w-28 text-right pr-2 font-semibold">Close Range (+2):</div>
          <div
            className={`flex-1 h-16 flex items-center p-1 rounded ${gameState.weatherEffects.clubs ? "bg-red-900" : "bg-gray-700"} 
              ${targetRowSelection ? "border-2 border-yellow-400 cursor-pointer" : ""}`}
            onClick={() => targetRowSelection && handleRowSelect("clubs")}
          >
            {gameState.weatherEffects.clubs && (
              <div className="absolute -mt-8 text-xs bg-red-800 px-2 py-1 rounded">Weather: Tundra</div>
            )}
            {currentPlayer.field.clubs.length > 0 ? (
              currentPlayer.field.clubs.map((card, index) => (
                <div
                  key={`${isOpponent ? "op" : "pl"}-clu-${index}`}
                  className="bg-gray-600 text-sm p-1 m-1 rounded w-16 h-14 flex items-center justify-center"
                >
                  {card.value}
                </div>
              ))
            ) : (
              <div className="text-gray-500">No cards</div>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}

